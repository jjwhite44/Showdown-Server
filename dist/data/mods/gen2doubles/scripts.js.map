{
  "version": 3,
  "sources": ["../../../../data/mods/gen2doubles/scripts.ts"],
  "sourcesContent": ["export const Scripts: ModdedBattleScriptsData = {\n\tinherit: 'gen2',\n\tgen: 2,\n\tpokemon: {\n\t\tinherit: true,\n\t\tgetStat(statName, unboosted, unmodified, fastReturn) {\n\t\t\t// @ts-expect-error type checking prevents 'hp' from being passed, but we're paranoid\n\t\t\tif (statName === 'hp') throw new Error(\"Please read `maxhp` directly\");\n\n\t\t\t// base stat\n\t\t\tlet stat = this.storedStats[statName];\n\n\t\t\t// Stat boosts.\n\t\t\tif (!unboosted) {\n\t\t\t\tlet boost = this.boosts[statName];\n\t\t\t\tif (boost > 6) boost = 6;\n\t\t\t\tif (boost < -6) boost = -6;\n\t\t\t\tif (boost >= 0) {\n\t\t\t\t\tconst boostTable = [1, 1.5, 2, 2.5, 3, 3.5, 4];\n\t\t\t\t\tstat = Math.floor(stat * boostTable[boost]);\n\t\t\t\t} else {\n\t\t\t\t\tconst numerators = [100, 66, 50, 40, 33, 28, 25];\n\t\t\t\t\tstat = Math.floor(stat * numerators[-boost] / 100);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.status === 'par' && statName === 'spe') {\n\t\t\t\tstat = Math.floor(stat / 4);\n\t\t\t}\n\n\t\t\tif (!unmodified) {\n\t\t\t\t// Burn attack drop is checked when you get the attack stat upon switch in and used until switch out.\n\t\t\t\tif (this.status === 'brn' && statName === 'atk') {\n\t\t\t\t\tstat = Math.floor(stat / 2);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Gen 2 caps stats at 999 and min is 1.\n\t\t\tstat = this.battle.clampIntRange(stat, 1, 999);\n\t\t\tif (fastReturn) return stat;\n\n\t\t\t// Screens\n\t\t\tif (!unboosted) {\n\t\t\t\tif (\n\t\t\t\t\t(statName === 'def' && this.side.sideConditions['reflect']) ||\n\t\t\t\t\t(statName === 'spd' && this.side.sideConditions['lightscreen'])\n\t\t\t\t) {\n\t\t\t\t\tif (this.side.active.length === 1) {\n\t\t\t\t\t\tstat *= 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstat *= 1.5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Handle boosting items\n\t\t\tif (\n\t\t\t\t(['Cubone', 'Marowak'].includes(this.baseSpecies.name) && this.item === 'thickclub' && statName === 'atk') ||\n\t\t\t\t(this.baseSpecies.name === 'Pikachu' && this.item === 'lightball' && statName === 'spa')\n\t\t\t) {\n\t\t\t\tstat *= 2;\n\t\t\t} else if (this.baseSpecies.name === 'Ditto' && this.item === 'metalpowder' && ['def', 'spd'].includes(statName)) {\n\t\t\t\tstat = Math.floor(stat * 1.5);\n\t\t\t}\n\n\t\t\treturn stat;\n\t\t},\n\t},\n\tactions: {\n\t\tinherit: true,\n\t\tgetDamage(source, target, move, suppressMessages) {\n\t\t\t// First of all, we get the move.\n\t\t\tif (typeof move === 'string') {\n\t\t\t\tmove = this.dex.getActiveMove(move);\n\t\t\t} else if (typeof move === 'number') {\n\t\t\t\tmove = {\n\t\t\t\t\tbasePower: move,\n\t\t\t\t\ttype: '???',\n\t\t\t\t\tcategory: 'Physical',\n\t\t\t\t\twillCrit: false,\n\t\t\t\t\tflags: {},\n\t\t\t\t} as unknown as ActiveMove;\n\t\t\t}\n\n\t\t\t// Let's test for immunities.\n\t\t\tif (!move.ignoreImmunity || (move.ignoreImmunity !== true && !move.ignoreImmunity[move.type])) {\n\t\t\t\tif (!target.runImmunity(move.type, true)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Is it an OHKO move?\n\t\t\tif (move.ohko) {\n\t\t\t\treturn target.maxhp;\n\t\t\t}\n\n\t\t\t// We edit the damage through move's damage callback\n\t\t\tif (move.damageCallback) {\n\t\t\t\treturn move.damageCallback.call(this.battle, source, target);\n\t\t\t}\n\n\t\t\t// We take damage from damage=level moves\n\t\t\tif (move.damage === 'level') {\n\t\t\t\treturn source.level;\n\t\t\t}\n\n\t\t\t// If there's a fix move damage, we run it\n\t\t\tif (move.damage) {\n\t\t\t\treturn move.damage;\n\t\t\t}\n\n\t\t\t// We check the category and typing to calculate later on the damage\n\t\t\tmove.category = this.battle.getCategory(move);\n\t\t\t// '???' is typeless damage: used for Struggle and Confusion etc\n\t\t\tif (!move.type) move.type = '???';\n\t\t\tconst type = move.type;\n\n\t\t\t// We get the base power and apply basePowerCallback if necessary\n\t\t\tlet basePower: number | false | null | undefined = move.basePower;\n\t\t\tif (move.basePowerCallback) {\n\t\t\t\tbasePower = move.basePowerCallback.call(this.battle, source, target, move);\n\t\t\t}\n\n\t\t\t// We check for Base Power\n\t\t\tif (!basePower) {\n\t\t\t\tif (basePower === 0) return; // Returning undefined means not dealing damage\n\t\t\t\treturn basePower;\n\t\t\t}\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\n\n\t\t\t// Checking for the move's Critical Hit ratio\n\t\t\tlet critRatio = this.battle.runEvent('ModifyCritRatio', source, target, move, move.critRatio || 0);\n\t\t\tcritRatio = this.battle.clampIntRange(critRatio, 0, 5);\n\t\t\tconst critMult = [0, 17, 32, 64, 85, 128];\n\t\t\tlet isCrit = move.willCrit || false;\n\t\t\tif (typeof move.willCrit === 'undefined') {\n\t\t\t\tif (critRatio) {\n\t\t\t\t\tisCrit = this.battle.random(256) < critMult[critRatio];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCrit && this.battle.runEvent('CriticalHit', target, null, move)) {\n\t\t\t\ttarget.getMoveHitData(move).crit = true;\n\t\t\t}\n\n\t\t\t// Happens after crit calculation\n\t\t\tif (basePower) {\n\t\t\t\t// confusion damage\n\t\t\t\tif (move.isConfusionSelfHit) {\n\t\t\t\t\tmove.type = move.baseMoveType!;\n\t\t\t\t\tbasePower = this.battle.runEvent('BasePower', source, target, move, basePower, true);\n\t\t\t\t\tmove.type = '???';\n\t\t\t\t} else {\n\t\t\t\t\tbasePower = this.battle.runEvent('BasePower', source, target, move, basePower, true);\n\t\t\t\t}\n\t\t\t\tif (basePower && move.basePowerModifier) {\n\t\t\t\t\tbasePower *= move.basePowerModifier;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!basePower) return 0;\n\t\t\tbasePower = this.battle.clampIntRange(basePower, 1);\n\n\t\t\t// We now check for attacker and defender\n\t\t\tlet level = source.level;\n\n\t\t\t// Using Beat Up\n\t\t\tif (move.allies) {\n\t\t\t\tthis.battle.add('-activate', source, 'move: Beat Up', '[of] ' + move.allies[0].name);\n\t\t\t\tlevel = move.allies[0].level;\n\t\t\t}\n\n\t\t\tconst attacker = move.overrideOffensivePokemon === 'target' ? target : source;\n\t\t\tconst defender = move.overrideDefensivePokemon === 'source' ? source : target;\n\n\t\t\tconst isPhysical = move.category === 'Physical';\n\t\t\tconst atkType: StatIDExceptHP = move.overrideOffensiveStat || (isPhysical ? 'atk' : 'spa');\n\t\t\tconst defType: StatIDExceptHP = move.overrideDefensiveStat || (isPhysical ? 'def' : 'spd');\n\n\t\t\tlet unboosted = false;\n\t\t\tlet noburndrop = false;\n\n\t\t\tif (isCrit) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-crit', target);\n\t\t\t\t// Stat level modifications are ignored if they are neutral to or favour the defender.\n\t\t\t\t// Reflect and Light Screen defensive boosts are only ignored if stat level modifications were also ignored as a result of that.\n\t\t\t\tif (attacker.boosts[atkType] <= defender.boosts[defType]) {\n\t\t\t\t\tunboosted = true;\n\t\t\t\t\tnoburndrop = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet attack = attacker.getStat(atkType, unboosted, noburndrop);\n\t\t\tlet defense = defender.getStat(defType, unboosted);\n\n\t\t\t// Using Beat Up\n\t\t\tif (move.allies) {\n\t\t\t\tattack = move.allies[0].species.baseStats.atk;\n\t\t\t\tmove.allies.shift();\n\t\t\t\tdefense = defender.species.baseStats.def;\n\t\t\t}\n\n\t\t\t// Moves that ignore offense and defense respectively.\n\t\t\tif (move.ignoreOffensive) {\n\t\t\t\tthis.battle.debug('Negating (sp)atk boost/penalty.');\n\t\t\t\t// The attack drop from the burn is only applied when attacker's attack level is higher than defender's defense level.\n\t\t\t\tattack = attacker.getStat(atkType, true, true);\n\t\t\t}\n\n\t\t\tif (move.ignoreDefensive) {\n\t\t\t\tthis.battle.debug('Negating (sp)def boost/penalty.');\n\t\t\t\tdefense = target.getStat(defType, true, true);\n\t\t\t}\n\n\t\t\tif (move.id === 'present') {\n\t\t\t\tconst typeIndexes: { [k: string]: number } = {\n\t\t\t\t\tNormal: 0, Fighting: 1, Flying: 2, Poison: 3, Ground: 4, Rock: 5, Bug: 7, Ghost: 8, Steel: 9,\n\t\t\t\t\tFire: 20, Water: 21, Grass: 22, Electric: 23, Psychic: 24, Ice: 25, Dragon: 26, Dark: 27,\n\t\t\t\t};\n\t\t\t\tattack = 10;\n\n\t\t\t\tconst attackerLastType = attacker.getTypes().slice(-1)[0];\n\t\t\t\tconst defenderLastType = defender.getTypes().slice(-1)[0];\n\n\t\t\t\tdefense = typeIndexes[attackerLastType] || 1;\n\t\t\t\tlevel = typeIndexes[defenderLastType] || 1;\n\t\t\t\tthis.battle.hint(\"Gen 2 Present has a glitched damage calculation using the secondary types of the Pokemon for the Attacker's Level and Defender's Defense.\", true);\n\t\t\t}\n\n\t\t\t// When either attack or defense are higher than 256, they are both divided by 4 and modded by 256.\n\t\t\t// This is what causes the rollover bugs.\n\t\t\tif (attack >= 256 || defense >= 256) {\n\t\t\t\tif (attack >= 1024 || defense >= 1024) {\n\t\t\t\t\tthis.battle.hint(\"In Gen 2, a stat will roll over to a small number if it is larger than 1024.\");\n\t\t\t\t}\n\t\t\t\tattack = this.battle.clampIntRange(Math.floor(attack / 4) % 256, 1);\n\t\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 4) % 256, 1);\n\t\t\t}\n\n\t\t\t// Self destruct moves halve defense at this point.\n\t\t\tif (move.selfdestruct && defType === 'def') {\n\t\t\t\tdefense = this.battle.clampIntRange(Math.floor(defense / 2), 1);\n\t\t\t}\n\n\t\t\t// Let's go with the calculation now that we have what we need.\n\t\t\t// We do it step by step just like the game does.\n\t\t\tlet damage = level * 2;\n\t\t\tdamage = Math.floor(damage / 5);\n\t\t\tdamage += 2;\n\t\t\tdamage *= basePower;\n\t\t\tdamage *= attack;\n\t\t\tdamage = Math.floor(damage / defense);\n\t\t\tdamage = Math.floor(damage / 50);\n\t\t\tif (isCrit) damage *= 2;\n\t\t\tdamage = Math.floor(this.battle.runEvent('ModifyDamage', attacker, defender, move, damage));\n\t\t\tdamage = this.battle.clampIntRange(damage, 1, 997);\n\t\t\tdamage += 2;\n\n\t\t\t// Weather modifiers\n\t\t\tif (\n\t\t\t\t(type === 'Water' && this.battle.field.isWeather('raindance')) ||\n\t\t\t\t(type === 'Fire' && this.battle.field.isWeather('sunnyday'))\n\t\t\t) {\n\t\t\t\tdamage = Math.floor(damage * 1.5);\n\t\t\t} else if (\n\t\t\t\t((type === 'Fire' || move.id === 'solarbeam') && this.battle.field.isWeather('raindance')) ||\n\t\t\t\t(type === 'Water' && this.battle.field.isWeather('sunnyday'))\n\t\t\t) {\n\t\t\t\tdamage = Math.floor(damage / 2);\n\t\t\t}\n\n\t\t\t// STAB damage bonus, the \"???\" type never gets STAB\n\t\t\tif (type !== '???' && source.hasType(type)) {\n\t\t\t\tdamage += Math.floor(damage / 2);\n\t\t\t}\n\n\t\t\t// Type effectiveness\n\t\t\tconst totalTypeMod = target.runEffectiveness(move);\n\t\t\t// Super effective attack\n\t\t\tif (totalTypeMod > 0) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-supereffective', target);\n\t\t\t\tdamage *= 2;\n\t\t\t\tif (totalTypeMod >= 2) {\n\t\t\t\t\tdamage *= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Resisted attack\n\t\t\tif (totalTypeMod < 0) {\n\t\t\t\tif (!suppressMessages) this.battle.add('-resisted', target);\n\t\t\t\tdamage = Math.floor(damage / 2);\n\t\t\t\tif (totalTypeMod <= -2) {\n\t\t\t\t\tdamage = Math.floor(damage / 2);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Attempting to add correct spread damage nerf\n\t\t\tconst { targets } = source.getMoveTargets(move, target);\n\t\t\tif (targets.length > 1) move.spreadHit = true;\n\t\t\tif (move.spreadHit && move.target === 'allAdjacentFoes') {\n\t\t\t\tconst spreadModifier = move.spreadModifier || 0.5;\n\t\t\t\tthis.battle.debug(`Spread modifier: ${spreadModifier}`);\n\t\t\t\tdamage = this.battle.modify(damage, spreadModifier);\n\t\t\t}\n\n\t\t\t// Apply random factor if damage is greater than 1, except for Flail and Reversal\n\t\t\tif (!move.noDamageVariance && damage > 1) {\n\t\t\t\tdamage *= this.battle.random(217, 256);\n\t\t\t\tdamage = Math.floor(damage / 255);\n\t\t\t}\n\n\t\t\t// If damage is less than 1, we return 1\n\t\t\tif (basePower && !Math.floor(damage)) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// We are done, this is the final damage\n\t\t\treturn damage;\n\t\t},\n\t},\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,UAAmC;AAAA,EAC/C,SAAS;AAAA,EACT,KAAK;AAAA,EACL,SAAS;AAAA,IACR,SAAS;AAAA,IACT,QAAQ,UAAU,WAAW,YAAY,YAAY;AAEpD,UAAI,aAAa;AAAM,cAAM,IAAI,MAAM,8BAA8B;AAGrE,UAAI,OAAO,KAAK,YAAY,QAAQ;AAGpC,UAAI,CAAC,WAAW;AACf,YAAI,QAAQ,KAAK,OAAO,QAAQ;AAChC,YAAI,QAAQ;AAAG,kBAAQ;AACvB,YAAI,QAAQ;AAAI,kBAAQ;AACxB,YAAI,SAAS,GAAG;AACf,gBAAM,aAAa,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAC7C,iBAAO,KAAK,MAAM,OAAO,WAAW,KAAK,CAAC;AAAA,QAC3C,OAAO;AACN,gBAAM,aAAa,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAC/C,iBAAO,KAAK,MAAM,OAAO,WAAW,CAAC,KAAK,IAAI,GAAG;AAAA,QAClD;AAAA,MACD;AAEA,UAAI,KAAK,WAAW,SAAS,aAAa,OAAO;AAChD,eAAO,KAAK,MAAM,OAAO,CAAC;AAAA,MAC3B;AAEA,UAAI,CAAC,YAAY;AAEhB,YAAI,KAAK,WAAW,SAAS,aAAa,OAAO;AAChD,iBAAO,KAAK,MAAM,OAAO,CAAC;AAAA,QAC3B;AAAA,MACD;AAGA,aAAO,KAAK,OAAO,cAAc,MAAM,GAAG,GAAG;AAC7C,UAAI;AAAY,eAAO;AAGvB,UAAI,CAAC,WAAW;AACf,YACE,aAAa,SAAS,KAAK,KAAK,eAAe,SAAS,KACxD,aAAa,SAAS,KAAK,KAAK,eAAe,aAAa,GAC5D;AACD,cAAI,KAAK,KAAK,OAAO,WAAW,GAAG;AAClC,oBAAQ;AAAA,UACT,OAAO;AACN,oBAAQ;AAAA,UACT;AAAA,QACD;AAAA,MACD;AAGA,UACE,CAAC,UAAU,SAAS,EAAE,SAAS,KAAK,YAAY,IAAI,KAAK,KAAK,SAAS,eAAe,aAAa,SACnG,KAAK,YAAY,SAAS,aAAa,KAAK,SAAS,eAAe,aAAa,OACjF;AACD,gBAAQ;AAAA,MACT,WAAW,KAAK,YAAY,SAAS,WAAW,KAAK,SAAS,iBAAiB,CAAC,OAAO,KAAK,EAAE,SAAS,QAAQ,GAAG;AACjH,eAAO,KAAK,MAAM,OAAO,GAAG;AAAA,MAC7B;AAEA,aAAO;AAAA,IACR;AAAA,EACD;AAAA,EACA,SAAS;AAAA,IACR,SAAS;AAAA,IACT,UAAU,QAAQ,QAAQ,MAAM,kBAAkB;AAEjD,UAAI,OAAO,SAAS,UAAU;AAC7B,eAAO,KAAK,IAAI,cAAc,IAAI;AAAA,MACnC,WAAW,OAAO,SAAS,UAAU;AACpC,eAAO;AAAA,UACN,WAAW;AAAA,UACX,MAAM;AAAA,UACN,UAAU;AAAA,UACV,UAAU;AAAA,UACV,OAAO,CAAC;AAAA,QACT;AAAA,MACD;AAGA,UAAI,CAAC,KAAK,kBAAmB,KAAK,mBAAmB,QAAQ,CAAC,KAAK,eAAe,KAAK,IAAI,GAAI;AAC9F,YAAI,CAAC,OAAO,YAAY,KAAK,MAAM,IAAI,GAAG;AACzC,iBAAO;AAAA,QACR;AAAA,MACD;AAGA,UAAI,KAAK,MAAM;AACd,eAAO,OAAO;AAAA,MACf;AAGA,UAAI,KAAK,gBAAgB;AACxB,eAAO,KAAK,eAAe,KAAK,KAAK,QAAQ,QAAQ,MAAM;AAAA,MAC5D;AAGA,UAAI,KAAK,WAAW,SAAS;AAC5B,eAAO,OAAO;AAAA,MACf;AAGA,UAAI,KAAK,QAAQ;AAChB,eAAO,KAAK;AAAA,MACb;AAGA,WAAK,WAAW,KAAK,OAAO,YAAY,IAAI;AAE5C,UAAI,CAAC,KAAK;AAAM,aAAK,OAAO;AAC5B,YAAM,OAAO,KAAK;AAGlB,UAAI,YAA+C,KAAK;AACxD,UAAI,KAAK,mBAAmB;AAC3B,oBAAY,KAAK,kBAAkB,KAAK,KAAK,QAAQ,QAAQ,QAAQ,IAAI;AAAA,MAC1E;AAGA,UAAI,CAAC,WAAW;AACf,YAAI,cAAc;AAAG;AACrB,eAAO;AAAA,MACR;AACA,kBAAY,KAAK,OAAO,cAAc,WAAW,CAAC;AAGlD,UAAI,YAAY,KAAK,OAAO,SAAS,mBAAmB,QAAQ,QAAQ,MAAM,KAAK,aAAa,CAAC;AACjG,kBAAY,KAAK,OAAO,cAAc,WAAW,GAAG,CAAC;AACrD,YAAM,WAAW,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG;AACxC,UAAI,SAAS,KAAK,YAAY;AAC9B,UAAI,OAAO,KAAK,aAAa,aAAa;AACzC,YAAI,WAAW;AACd,mBAAS,KAAK,OAAO,OAAO,GAAG,IAAI,SAAS,SAAS;AAAA,QACtD;AAAA,MACD;AAEA,UAAI,UAAU,KAAK,OAAO,SAAS,eAAe,QAAQ,MAAM,IAAI,GAAG;AACtE,eAAO,eAAe,IAAI,EAAE,OAAO;AAAA,MACpC;AAGA,UAAI,WAAW;AAEd,YAAI,KAAK,oBAAoB;AAC5B,eAAK,OAAO,KAAK;AACjB,sBAAY,KAAK,OAAO,SAAS,aAAa,QAAQ,QAAQ,MAAM,WAAW,IAAI;AACnF,eAAK,OAAO;AAAA,QACb,OAAO;AACN,sBAAY,KAAK,OAAO,SAAS,aAAa,QAAQ,QAAQ,MAAM,WAAW,IAAI;AAAA,QACpF;AACA,YAAI,aAAa,KAAK,mBAAmB;AACxC,uBAAa,KAAK;AAAA,QACnB;AAAA,MACD;AACA,UAAI,CAAC;AAAW,eAAO;AACvB,kBAAY,KAAK,OAAO,cAAc,WAAW,CAAC;AAGlD,UAAI,QAAQ,OAAO;AAGnB,UAAI,KAAK,QAAQ;AAChB,aAAK,OAAO,IAAI,aAAa,QAAQ,iBAAiB,UAAU,KAAK,OAAO,CAAC,EAAE,IAAI;AACnF,gBAAQ,KAAK,OAAO,CAAC,EAAE;AAAA,MACxB;AAEA,YAAM,WAAW,KAAK,6BAA6B,WAAW,SAAS;AACvE,YAAM,WAAW,KAAK,6BAA6B,WAAW,SAAS;AAEvE,YAAM,aAAa,KAAK,aAAa;AACrC,YAAM,UAA0B,KAAK,0BAA0B,aAAa,QAAQ;AACpF,YAAM,UAA0B,KAAK,0BAA0B,aAAa,QAAQ;AAEpF,UAAI,YAAY;AAChB,UAAI,aAAa;AAEjB,UAAI,QAAQ;AACX,YAAI,CAAC;AAAkB,eAAK,OAAO,IAAI,SAAS,MAAM;AAGtD,YAAI,SAAS,OAAO,OAAO,KAAK,SAAS,OAAO,OAAO,GAAG;AACzD,sBAAY;AACZ,uBAAa;AAAA,QACd;AAAA,MACD;AAEA,UAAI,SAAS,SAAS,QAAQ,SAAS,WAAW,UAAU;AAC5D,UAAI,UAAU,SAAS,QAAQ,SAAS,SAAS;AAGjD,UAAI,KAAK,QAAQ;AAChB,iBAAS,KAAK,OAAO,CAAC,EAAE,QAAQ,UAAU;AAC1C,aAAK,OAAO,MAAM;AAClB,kBAAU,SAAS,QAAQ,UAAU;AAAA,MACtC;AAGA,UAAI,KAAK,iBAAiB;AACzB,aAAK,OAAO,MAAM,iCAAiC;AAEnD,iBAAS,SAAS,QAAQ,SAAS,MAAM,IAAI;AAAA,MAC9C;AAEA,UAAI,KAAK,iBAAiB;AACzB,aAAK,OAAO,MAAM,iCAAiC;AACnD,kBAAU,OAAO,QAAQ,SAAS,MAAM,IAAI;AAAA,MAC7C;AAEA,UAAI,KAAK,OAAO,WAAW;AAC1B,cAAM,cAAuC;AAAA,UAC5C,QAAQ;AAAA,UAAG,UAAU;AAAA,UAAG,QAAQ;AAAA,UAAG,QAAQ;AAAA,UAAG,QAAQ;AAAA,UAAG,MAAM;AAAA,UAAG,KAAK;AAAA,UAAG,OAAO;AAAA,UAAG,OAAO;AAAA,UAC3F,MAAM;AAAA,UAAI,OAAO;AAAA,UAAI,OAAO;AAAA,UAAI,UAAU;AAAA,UAAI,SAAS;AAAA,UAAI,KAAK;AAAA,UAAI,QAAQ;AAAA,UAAI,MAAM;AAAA,QACvF;AACA,iBAAS;AAET,cAAM,mBAAmB,SAAS,SAAS,EAAE,MAAM,EAAE,EAAE,CAAC;AACxD,cAAM,mBAAmB,SAAS,SAAS,EAAE,MAAM,EAAE,EAAE,CAAC;AAExD,kBAAU,YAAY,gBAAgB,KAAK;AAC3C,gBAAQ,YAAY,gBAAgB,KAAK;AACzC,aAAK,OAAO,KAAK,6IAA6I,IAAI;AAAA,MACnK;AAIA,UAAI,UAAU,OAAO,WAAW,KAAK;AACpC,YAAI,UAAU,QAAQ,WAAW,MAAM;AACtC,eAAK,OAAO,KAAK,8EAA8E;AAAA,QAChG;AACA,iBAAS,KAAK,OAAO,cAAc,KAAK,MAAM,SAAS,CAAC,IAAI,KAAK,CAAC;AAClE,kBAAU,KAAK,OAAO,cAAc,KAAK,MAAM,UAAU,CAAC,IAAI,KAAK,CAAC;AAAA,MACrE;AAGA,UAAI,KAAK,gBAAgB,YAAY,OAAO;AAC3C,kBAAU,KAAK,OAAO,cAAc,KAAK,MAAM,UAAU,CAAC,GAAG,CAAC;AAAA,MAC/D;AAIA,UAAI,SAAS,QAAQ;AACrB,eAAS,KAAK,MAAM,SAAS,CAAC;AAC9B,gBAAU;AACV,gBAAU;AACV,gBAAU;AACV,eAAS,KAAK,MAAM,SAAS,OAAO;AACpC,eAAS,KAAK,MAAM,SAAS,EAAE;AAC/B,UAAI;AAAQ,kBAAU;AACtB,eAAS,KAAK,MAAM,KAAK,OAAO,SAAS,gBAAgB,UAAU,UAAU,MAAM,MAAM,CAAC;AAC1F,eAAS,KAAK,OAAO,cAAc,QAAQ,GAAG,GAAG;AACjD,gBAAU;AAGV,UACE,SAAS,WAAW,KAAK,OAAO,MAAM,UAAU,WAAW,KAC3D,SAAS,UAAU,KAAK,OAAO,MAAM,UAAU,UAAU,GACzD;AACD,iBAAS,KAAK,MAAM,SAAS,GAAG;AAAA,MACjC,YACG,SAAS,UAAU,KAAK,OAAO,gBAAgB,KAAK,OAAO,MAAM,UAAU,WAAW,KACvF,SAAS,WAAW,KAAK,OAAO,MAAM,UAAU,UAAU,GAC1D;AACD,iBAAS,KAAK,MAAM,SAAS,CAAC;AAAA,MAC/B;AAGA,UAAI,SAAS,SAAS,OAAO,QAAQ,IAAI,GAAG;AAC3C,kBAAU,KAAK,MAAM,SAAS,CAAC;AAAA,MAChC;AAGA,YAAM,eAAe,OAAO,iBAAiB,IAAI;AAEjD,UAAI,eAAe,GAAG;AACrB,YAAI,CAAC;AAAkB,eAAK,OAAO,IAAI,mBAAmB,MAAM;AAChE,kBAAU;AACV,YAAI,gBAAgB,GAAG;AACtB,oBAAU;AAAA,QACX;AAAA,MACD;AAEA,UAAI,eAAe,GAAG;AACrB,YAAI,CAAC;AAAkB,eAAK,OAAO,IAAI,aAAa,MAAM;AAC1D,iBAAS,KAAK,MAAM,SAAS,CAAC;AAC9B,YAAI,gBAAgB,IAAI;AACvB,mBAAS,KAAK,MAAM,SAAS,CAAC;AAAA,QAC/B;AAAA,MACD;AAGA,YAAM,EAAE,QAAQ,IAAI,OAAO,eAAe,MAAM,MAAM;AACtD,UAAI,QAAQ,SAAS;AAAG,aAAK,YAAY;AACzC,UAAI,KAAK,aAAa,KAAK,WAAW,mBAAmB;AACxD,cAAM,iBAAiB,KAAK,kBAAkB;AAC9C,aAAK,OAAO,MAAM,oBAAoB,gBAAgB;AACtD,iBAAS,KAAK,OAAO,OAAO,QAAQ,cAAc;AAAA,MACnD;AAGA,UAAI,CAAC,KAAK,oBAAoB,SAAS,GAAG;AACzC,kBAAU,KAAK,OAAO,OAAO,KAAK,GAAG;AACrC,iBAAS,KAAK,MAAM,SAAS,GAAG;AAAA,MACjC;AAGA,UAAI,aAAa,CAAC,KAAK,MAAM,MAAM,GAAG;AACrC,eAAO;AAAA,MACR;AAGA,aAAO;AAAA,IACR;AAAA,EACD;AACD;",
  "names": []
}
